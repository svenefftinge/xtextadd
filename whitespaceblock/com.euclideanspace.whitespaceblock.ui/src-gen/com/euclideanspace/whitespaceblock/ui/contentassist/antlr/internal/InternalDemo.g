/*
* generated by Xtext
*/
grammar InternalDemo;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.euclideanspace.whitespaceblock.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.euclideanspace.whitespaceblock.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.euclideanspace.whitespaceblock.services.DemoGrammarAccess;

}

@parser::members {
 
 	private DemoGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DemoGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getContentsAssignment()); }
(rule__Model__ContentsAssignment)
{ after(grammarAccess.getModelAccess().getContentsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecurse
entryRuleRecurse 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_LINECONTINUATION");
}
:
{ before(grammarAccess.getRecurseRule()); }
	 ruleRecurse
{ after(grammarAccess.getRecurseRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Recurse
ruleRecurse
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_LINECONTINUATION");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecurseAccess().getGroup()); }
(rule__Recurse__Group__0)
{ after(grammarAccess.getRecurseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__Recurse__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getNAssignment_1_0()); }
(rule__Recurse__NAssignment_1_0)
{ after(grammarAccess.getRecurseAccess().getNAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getRecurseAccess().getGroup_1_1()); }
(rule__Recurse__Group_1_1__0)
{ after(grammarAccess.getRecurseAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Recurse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group__0__Impl
	rule__Recurse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRecurseAction_0()); }
(

)
{ after(grammarAccess.getRecurseAccess().getRecurseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRecurseAccess().getAlternatives_1()); }
(rule__Recurse__Alternatives_1)
{ after(grammarAccess.getRecurseAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getRecurseAccess().getAlternatives_1()); }
(rule__Recurse__Alternatives_1)*
{ after(grammarAccess.getRecurseAccess().getAlternatives_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Recurse__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__0__Impl
	rule__Recurse__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getBEGINTerminalRuleCall_1_1_0()); }
	RULE_BEGIN
{ after(grammarAccess.getRecurseAccess().getBEGINTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__1__Impl
	rule__Recurse__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRAssignment_1_1_1()); }
(rule__Recurse__RAssignment_1_1_1)
{ after(grammarAccess.getRecurseAccess().getRAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getENDTerminalRuleCall_1_1_2()); }
	RULE_END
{ after(grammarAccess.getRecurseAccess().getENDTerminalRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ContentsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
	ruleRecurse{ after(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__NAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__RAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_1_0()); }
	ruleRecurse{ after(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_BEGIN : '{|';

RULE_END : '|}';

RULE_LINECONTINUATION : '\\';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


